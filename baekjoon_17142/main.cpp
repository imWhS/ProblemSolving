/*
 * 연구소 3
 *
 * 바이러스: 비활성 상태 / 활성 상태 중 하나
 * - 초기에는 비활성 상태
 * - 활성 상태일 경우: 상하좌우 인접 빈 칸에 동시 복제, 1초 소요
 * 바이러스 M개를 활성 상태로 변경하려고 한다.
 *
 * 연구소: N * N 크기
 * - 빈 칸, 벽(1, -), 바이러스(2, 0, *)로 구성
 * - 활성 바이러스(0)가 비활성 바이러스(*)가 있는 칸으로 가면, 비활성 바이러스가 활성으로 변화
 * - 빈 칸은 바이러스가 퍼지는 시간으로 표시
 *
 * input:
 * - 연구소의 크기 N, 놓을 수 있는 바이러스의 개수 M
 * - 연구소의 상태(0은 빈 칸, 1은 벽, 2는 바이러스를 놓을 수 있는 위치)
 * - 바이러스(2)를 놓을 수 있는 개수는 M 이상, 10 이하
 *
 * output: 모든 빈 칸에 바이러스를 퍼뜨리는 최소 시간. 바이러스를 어떻게 놓아도 모든 빈 칸에 바이러스를 퍼뜨릴 수 없는 경우 -1 출력
 *
 * etc
 * - 모든 빈 칸에 바이러스가 퍼지는 것이 비활성 바이러스가 활성 바이러스로 변화하는 것보다 우선*/

#include <iostream>

using namespace std;

int N, M;
int map[51][51];

int main() {
    cin >> N >> M;
    for(int i = 1; i <= N; i++) for(int j = 1; j <= N; j++) cin >> map[i][j];

    solution();

    return 0;
}